// Code generated by github.com/hooto/hrpc4g
// source: types.proto
// DO NOT EDIT!

package rpcbench

import "context"

import "github.com/golang/protobuf/proto"
import "github.com/hooto/hrpc4g/hrpc"

type HrpcBenchmarkClientInterface interface {
	UnaryCall(ctx context.Context, in *BenchRequest) (*BenchReply, error)
}

type hrpcBenchmarkClient struct {
	c *hrpc.Client
}

func (c *hrpcBenchmarkClient) UnaryCall(ctx context.Context, in *BenchRequest) (*BenchReply, error) {
	out := new(BenchReply)
	err := c.c.Invoke(ctx, "rpcbench.Benchmark/UnaryCall", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func HrpcBenchmarkClient(c *hrpc.Client) HrpcBenchmarkClientInterface {
	return &hrpcBenchmarkClient{
		c: c,
	}
}

var HrpcBenchmarkServiceDesc = &hrpc.ServiceDesc{
	ServiceName: "rpcbench.Benchmark",
	HandlerType: (*BenchmarkServer)(nil),
	Methods: []hrpc.ServiceMethodDesc{
		{
			MethodName: "UnaryCall",
			Handler:    hrpc_Benchmark_UnaryCall_Handler,
		},
	},
}

func hrpc_Benchmark_UnaryCall_Handler(srv interface{}, ctx context.Context, inb []byte) (proto.Message, error) {
	in := new(BenchRequest)
	if err := proto.Unmarshal(inb, in); err != nil {
		return nil, err
	}
	return srv.(BenchmarkServer).UnaryCall(ctx, in)
}